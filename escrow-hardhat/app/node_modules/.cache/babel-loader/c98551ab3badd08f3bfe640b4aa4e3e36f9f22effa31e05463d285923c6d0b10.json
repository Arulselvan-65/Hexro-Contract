{"ast":null,"code":"import { BaseError } from './base.js';\n/** @deprecated */\nexport class DataLengthTooLongError extends BaseError {\n  constructor(_ref) {\n    let {\n      consumed,\n      length\n    } = _ref;\n    super(`Consumed bytes (${consumed}) is shorter than data length (${length - 1}).`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'DataLengthTooLongError'\n    });\n  }\n}\n/** @deprecated */\nexport class DataLengthTooShortError extends BaseError {\n  constructor(_ref2) {\n    let {\n      length,\n      dataLength\n    } = _ref2;\n    super(`Data length (${dataLength - 1}) is shorter than consumed bytes length (${length - 1}).`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'DataLengthTooShortError'\n    });\n  }\n}\nexport class IntegerOutOfRangeError extends BaseError {\n  constructor(_ref3) {\n    let {\n      max,\n      min,\n      signed,\n      size,\n      value\n    } = _ref3;\n    super(`Number \"${value}\" is not in safe ${size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'IntegerOutOfRangeError'\n    });\n  }\n}\nexport class InvalidBytesBooleanError extends BaseError {\n  constructor(bytes) {\n    super(`Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidBytesBooleanError'\n    });\n  }\n}\nexport class InvalidHexBooleanError extends BaseError {\n  constructor(hex) {\n    super(`Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidHexBooleanError'\n    });\n  }\n}\nexport class InvalidHexValueError extends BaseError {\n  constructor(value) {\n    super(`Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidHexValueError'\n    });\n  }\n}\n/** @deprecated */\nexport class OffsetOutOfBoundsError extends BaseError {\n  constructor(_ref4) {\n    let {\n      nextOffset,\n      offset\n    } = _ref4;\n    super(`Next offset (${nextOffset}) is greater than previous offset + consumed bytes (${offset})`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'OffsetOutOfBoundsError'\n    });\n  }\n}\nexport class SizeOverflowError extends BaseError {\n  constructor(_ref5) {\n    let {\n      givenSize,\n      maxSize\n    } = _ref5;\n    super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'SizeOverflowError'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,SAAS,QAAQ,WAAW;AAKrC;AACA,OAAM,MAAOC,sBAAuB,SAAQD,SAAS;EAEnDE,kBAAsE;IAAA,IAA1D;MAAEC,QAAQ;MAAEC;IAAM,CAAwC;IACpE,KAAK,CACH,mBAAmBD,QAAQ,kCACzBC,MAAM,GAAG,CACX,IAAI,CACL;IANMC;;;;aAAO;;EAOhB;;AAMF;AACA,OAAM,MAAOC,uBAAwB,SAAQN,SAAS;EAEpDE,mBAA0E;IAAA,IAA9D;MAAEE,MAAM;MAAEG;IAAU,CAA0C;IACxE,KAAK,CACH,gBAAgBA,UAAU,GAAG,CAAC,4CAC5BH,MAAM,GAAG,CACX,IAAI,CACL;IANMC;;;;aAAO;;EAOhB;;AAMF,OAAM,MAAOG,sBAAuB,SAAQR,SAAS;EAEnDE,mBAYC;IAAA,IAZW;MACVO,GAAG;MACHC,GAAG;MACHC,MAAM;MACNC,IAAI;MACJC;IAAK,CAON;IACC,KAAK,CACH,WAAWA,KAAK,oBACdD,IAAI,GAAG,GAAGA,IAAI,GAAG,CAAC,QAAQD,MAAM,GAAG,QAAQ,GAAG,UAAU,GAAG,GAAG,EAChE,iBAAiBF,GAAG,GAAG,IAAIC,GAAG,OAAOD,GAAG,GAAG,GAAG,UAAUC,GAAG,GAAG,EAAE,CACjE;IAlBML;;;;aAAO;;EAmBhB;;AAMF,OAAM,MAAOS,wBAAyB,SAAQd,SAAS;EAErDE,YAAYa,KAAgB;IAC1B,KAAK,CACH,gBAAgBA,KAAK,gGAAgG,CACtH;IAJMV;;;;aAAO;;EAKhB;;AAMF,OAAM,MAAOW,sBAAuB,SAAQhB,SAAS;EAEnDE,YAAYe,GAAQ;IAClB,KAAK,CACH,cAAcA,GAAG,gFAAgF,CAClG;IAJMZ;;;;aAAO;;EAKhB;;AAMF,OAAM,MAAOa,oBAAqB,SAAQlB,SAAS;EAEjDE,YAAYW,KAAU;IACpB,KAAK,CACH,cAAcA,KAAK,uBAAuBA,KAAK,CAACT,MAAM,+BAA+B,CACtF;IAJMC;;;;aAAO;;EAKhB;;AAMF;AACA,OAAM,MAAOc,sBAAuB,SAAQnB,SAAS;EAEnDE,mBAA0E;IAAA,IAA9D;MAAEkB,UAAU;MAAEC;IAAM,CAA0C;IACxE,KAAK,CACH,gBAAgBD,UAAU,uDAAuDC,MAAM,GAAG,CAC3F;IAJMhB;;;;aAAO;;EAKhB;;AAMF,OAAM,MAAOiB,iBAAkB,SAAQtB,SAAS;EAE9CE,mBAA0E;IAAA,IAA9D;MAAEqB,SAAS;MAAEC;IAAO,CAA0C;IACxE,KAAK,CACH,sBAAsBA,OAAO,uBAAuBD,SAAS,SAAS,CACvE;IAJMlB;;;;aAAO;;EAKhB","names":["BaseError","DataLengthTooLongError","constructor","consumed","length","Object","DataLengthTooShortError","dataLength","IntegerOutOfRangeError","max","min","signed","size","value","InvalidBytesBooleanError","bytes","InvalidHexBooleanError","hex","InvalidHexValueError","OffsetOutOfBoundsError","nextOffset","offset","SizeOverflowError","givenSize","maxSize"],"sources":["D:\\Escrow App\\escrow-hardhat\\node_modules\\viem\\errors\\encoding.ts"],"sourcesContent":["import type { ByteArray, Hex } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type DataLengthTooLongErrorType = DataLengthTooLongError & {\n  name: 'DataLengthTooLongError'\n}\n/** @deprecated */\nexport class DataLengthTooLongError extends BaseError {\n  override name = 'DataLengthTooLongError'\n  constructor({ consumed, length }: { consumed: number; length: number }) {\n    super(\n      `Consumed bytes (${consumed}) is shorter than data length (${\n        length - 1\n      }).`,\n    )\n  }\n}\n\nexport type DataLengthTooShortErrorType = DataLengthTooShortError & {\n  name: 'DataLengthTooShortError'\n}\n/** @deprecated */\nexport class DataLengthTooShortError extends BaseError {\n  override name = 'DataLengthTooShortError'\n  constructor({ length, dataLength }: { length: number; dataLength: number }) {\n    super(\n      `Data length (${dataLength - 1}) is shorter than consumed bytes length (${\n        length - 1\n      }).`,\n    )\n  }\n}\n\nexport type IntegerOutOfRangeErrorType = IntegerOutOfRangeError & {\n  name: 'IntegerOutOfRangeError'\n}\nexport class IntegerOutOfRangeError extends BaseError {\n  override name = 'IntegerOutOfRangeError'\n  constructor({\n    max,\n    min,\n    signed,\n    size,\n    value,\n  }: {\n    max?: string\n    min: string\n    signed?: boolean\n    size?: number\n    value: string\n  }) {\n    super(\n      `Number \"${value}\" is not in safe ${\n        size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''\n      }integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`,\n    )\n  }\n}\n\nexport type InvalidBytesBooleanErrorType = InvalidBytesBooleanError & {\n  name: 'InvalidBytesBooleanError'\n}\nexport class InvalidBytesBooleanError extends BaseError {\n  override name = 'InvalidBytesBooleanError'\n  constructor(bytes: ByteArray) {\n    super(\n      `Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`,\n    )\n  }\n}\n\nexport type InvalidHexBooleanErrorType = InvalidHexBooleanError & {\n  name: 'InvalidHexBooleanError'\n}\nexport class InvalidHexBooleanError extends BaseError {\n  override name = 'InvalidHexBooleanError'\n  constructor(hex: Hex) {\n    super(\n      `Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`,\n    )\n  }\n}\n\nexport type InvalidHexValueErrorType = InvalidHexValueError & {\n  name: 'InvalidHexValueError'\n}\nexport class InvalidHexValueError extends BaseError {\n  override name = 'InvalidHexValueError'\n  constructor(value: Hex) {\n    super(\n      `Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`,\n    )\n  }\n}\n\nexport type OffsetOutOfBoundsErrorType = OffsetOutOfBoundsError & {\n  name: 'OffsetOutOfBoundsError'\n}\n/** @deprecated */\nexport class OffsetOutOfBoundsError extends BaseError {\n  override name = 'OffsetOutOfBoundsError' as const\n  constructor({ nextOffset, offset }: { nextOffset: number; offset: number }) {\n    super(\n      `Next offset (${nextOffset}) is greater than previous offset + consumed bytes (${offset})`,\n    )\n  }\n}\n\nexport type SizeOverflowErrorType = SizeOverflowError & {\n  name: 'SizeOverflowError'\n}\nexport class SizeOverflowError extends BaseError {\n  override name = 'SizeOverflowError' as const\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\n    super(\n      `Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`,\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}