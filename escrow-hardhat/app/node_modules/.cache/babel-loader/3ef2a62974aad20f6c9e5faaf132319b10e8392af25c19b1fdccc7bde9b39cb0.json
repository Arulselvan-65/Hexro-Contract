{"ast":null,"code":"import { ChainDoesNotSupportContract, ChainMismatchError, ChainNotFoundError } from '../errors/chain.js';\nexport function assertCurrentChain(_ref) {\n  let {\n    chain,\n    currentChainId\n  } = _ref;\n  if (!chain) throw new ChainNotFoundError();\n  if (currentChainId !== chain.id) throw new ChainMismatchError({\n    chain,\n    currentChainId\n  });\n}\nexport function defineChain(chain) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    fees = chain.fees,\n    formatters = chain.formatters,\n    serializers = chain.serializers\n  } = config;\n  return {\n    ...chain,\n    fees,\n    formatters,\n    serializers\n  };\n}\nexport function getChainContractAddress(_ref2) {\n  let {\n    blockNumber,\n    chain,\n    contract: name\n  } = _ref2;\n  const contract = chain?.contracts?.[name];\n  if (!contract) throw new ChainDoesNotSupportContract({\n    chain,\n    contract: {\n      name\n    }\n  });\n  if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber) throw new ChainDoesNotSupportContract({\n    blockNumber,\n    chain,\n    contract: {\n      name,\n      blockCreated: contract.blockCreated\n    }\n  });\n  return contract.address;\n}","map":{"version":3,"mappings":"AAAA,SACEA,2BAA2B,EAE3BC,kBAAkB,EAElBC,kBAAkB,QAEb,oBAAoB;AAoB3B,OAAM,SAAUC,kBAAkB,OAGH;EAAA,IAHI;IACjCC,KAAK;IACLC;EAAc,CACe;EAC7B,IAAI,CAACD,KAAK,EAAE,MAAM,IAAIF,kBAAkB,EAAE;EAC1C,IAAIG,cAAc,KAAKD,KAAK,CAACE,EAAE,EAC7B,MAAM,IAAIL,kBAAkB,CAAC;IAAEG,KAAK;IAAEC;EAAc,CAAE,CAAC;AAC3D;AAEA,OAAM,SAAUE,WAAW,CAIzBH,KAAY,EACwB;EAAA,IAApCI,6EAAkC,EAAE;EAEpC,MAAM;IACJC,IAAI,GAAGL,KAAK,CAACK,IAAI;IACjBC,UAAU,GAAGN,KAAK,CAACM,UAAU;IAC7BC,WAAW,GAAGP,KAAK,CAACO;EAAW,CAChC,GAAGH,MAAM;EACV,OAAO;IACL,GAAGJ,KAAK;IACRK,IAAI;IACJC,UAAU;IACVC;GACoD;AACxD;AAKA,OAAM,SAAUC,uBAAuB,QAQtC;EAAA,IARuC;IACtCC,WAAW;IACXT,KAAK;IACLU,QAAQ,EAAEC;EAAI,CAKf;EACC,MAAMD,QAAQ,GAAIV,KAAK,EAAEY,SAA2C,GAAGD,IAAI,CAAC;EAC5E,IAAI,CAACD,QAAQ,EACX,MAAM,IAAId,2BAA2B,CAAC;IACpCI,KAAK;IACLU,QAAQ,EAAE;MAAEC;IAAI;GACjB,CAAC;EAEJ,IACEF,WAAW,IACXC,QAAQ,CAACG,YAAY,IACrBH,QAAQ,CAACG,YAAY,GAAGJ,WAAW,EAEnC,MAAM,IAAIb,2BAA2B,CAAC;IACpCa,WAAW;IACXT,KAAK;IACLU,QAAQ,EAAE;MACRC,IAAI;MACJE,YAAY,EAAEH,QAAQ,CAACG;;GAE1B,CAAC;EAEJ,OAAOH,QAAQ,CAACI,OAAO;AACzB","names":["ChainDoesNotSupportContract","ChainMismatchError","ChainNotFoundError","assertCurrentChain","chain","currentChainId","id","defineChain","config","fees","formatters","serializers","getChainContractAddress","blockNumber","contract","name","contracts","blockCreated","address"],"sources":["D:\\Escrow App\\escrow-hardhat\\node_modules\\viem\\utils\\chain.ts"],"sourcesContent":["import {\n  ChainDoesNotSupportContract,\n  type ChainDoesNotSupportContractErrorType,\n  ChainMismatchError,\n  type ChainMismatchErrorType,\n  ChainNotFoundError,\n  type ChainNotFoundErrorType,\n} from '../errors/chain.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type {\n  Chain,\n  ChainConfig,\n  ChainContract,\n  ChainFormatters,\n} from '../types/chain.js'\nimport type { Assign } from '../types/utils.js'\n\nexport type AssertCurrentChainParameters = {\n  chain?: Chain\n  currentChainId: number\n}\n\nexport type AssertCurrentChainErrorType =\n  | ChainNotFoundErrorType\n  | ChainMismatchErrorType\n  | ErrorType\n\nexport function assertCurrentChain({\n  chain,\n  currentChainId,\n}: AssertCurrentChainParameters): void {\n  if (!chain) throw new ChainNotFoundError()\n  if (currentChainId !== chain.id)\n    throw new ChainMismatchError({ chain, currentChainId })\n}\n\nexport function defineChain<\n  const chain extends Chain,\n  formatters extends ChainFormatters,\n>(\n  chain: chain,\n  config: ChainConfig<formatters> = {},\n): Assign<chain, ChainConfig<formatters>> {\n  const {\n    fees = chain.fees,\n    formatters = chain.formatters,\n    serializers = chain.serializers,\n  } = config\n  return {\n    ...chain,\n    fees,\n    formatters,\n    serializers,\n  } as unknown as Assign<chain, ChainConfig<formatters>>\n}\n\nexport type GetChainContractAddressErrorType =\n  ChainDoesNotSupportContractErrorType\n\nexport function getChainContractAddress({\n  blockNumber,\n  chain,\n  contract: name,\n}: {\n  blockNumber?: bigint\n  chain: Chain\n  contract: string\n}) {\n  const contract = (chain?.contracts as Record<string, ChainContract>)?.[name]\n  if (!contract)\n    throw new ChainDoesNotSupportContract({\n      chain,\n      contract: { name },\n    })\n\n  if (\n    blockNumber &&\n    contract.blockCreated &&\n    contract.blockCreated > blockNumber\n  )\n    throw new ChainDoesNotSupportContract({\n      blockNumber,\n      chain,\n      contract: {\n        name,\n        blockCreated: contract.blockCreated,\n      },\n    })\n\n  return contract.address\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}