{"ast":null,"code":"import { formatEther } from '../utils/unit/formatEther.js';\nimport { formatGwei } from '../utils/unit/formatGwei.js';\nimport { BaseError } from './base.js';\nexport function prettyPrint(args) {\n  const entries = Object.entries(args).map(_ref => {\n    let [key, value] = _ref;\n    if (value === undefined || value === false) return null;\n    return [key, value];\n  }).filter(Boolean);\n  const maxLength = entries.reduce((acc, _ref2) => {\n    let [key] = _ref2;\n    return Math.max(acc, key.length);\n  }, 0);\n  return entries.map(_ref3 => {\n    let [key, value] = _ref3;\n    return `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`;\n  }).join('\\n');\n}\nexport class FeeConflictError extends BaseError {\n  constructor() {\n    super(['Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.', 'Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.'].join('\\n'));\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'FeeConflictError'\n    });\n  }\n}\nexport class InvalidLegacyVError extends BaseError {\n  constructor(_ref4) {\n    let {\n      v\n    } = _ref4;\n    super(`Invalid \\`v\\` value \"${v}\". Expected 27 or 28.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidLegacyVError'\n    });\n  }\n}\nexport class InvalidSerializableTransactionError extends BaseError {\n  constructor(_ref5) {\n    let {\n      transaction\n    } = _ref5;\n    super('Cannot infer a transaction type from provided transaction.', {\n      metaMessages: ['Provided Transaction:', '{', prettyPrint(transaction), '}', '', 'To infer the type, either provide:', '- a `type` to the Transaction, or', '- an EIP-1559 Transaction with `maxFeePerGas`, or', '- an EIP-2930 Transaction with `gasPrice` & `accessList`, or', '- a Legacy Transaction with `gasPrice`']\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidSerializableTransactionError'\n    });\n  }\n}\nexport class InvalidSerializedTransactionTypeError extends BaseError {\n  constructor(_ref6) {\n    let {\n      serializedType\n    } = _ref6;\n    super(`Serialized transaction type \"${serializedType}\" is invalid.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidSerializedTransactionType'\n    });\n    Object.defineProperty(this, \"serializedType\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.serializedType = serializedType;\n  }\n}\nexport class InvalidSerializedTransactionError extends BaseError {\n  constructor(_ref7) {\n    let {\n      attributes,\n      serializedTransaction,\n      type\n    } = _ref7;\n    const missing = Object.entries(attributes).map(_ref8 => {\n      let [key, value] = _ref8;\n      return typeof value === 'undefined' ? key : undefined;\n    }).filter(Boolean);\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n      metaMessages: [`Serialized Transaction: \"${serializedTransaction}\"`, missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : ''].filter(Boolean)\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidSerializedTransactionError'\n    });\n    Object.defineProperty(this, \"serializedTransaction\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"type\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.serializedTransaction = serializedTransaction;\n    this.type = type;\n  }\n}\nexport class InvalidStorageKeySizeError extends BaseError {\n  constructor(_ref9) {\n    let {\n      storageKey\n    } = _ref9;\n    super(`Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Math.floor((storageKey.length - 2) / 2)} bytes.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidStorageKeySizeError'\n    });\n  }\n}\nexport class TransactionExecutionError extends BaseError {\n  constructor(cause, _ref10) {\n    let {\n      account,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    } = _ref10;\n    const prettyArgs = prettyPrint({\n      chain: chain && `${chain?.name} (id: ${chain?.id})`,\n      from: account?.address,\n      to,\n      value: typeof value !== 'undefined' && `${formatEther(value)} ${chain?.nativeCurrency.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice: typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas: typeof maxFeePerGas !== 'undefined' && `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== 'undefined' && `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce\n    });\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [...(cause.metaMessages ? [...cause.metaMessages, ' '] : []), 'Request Arguments:', prettyArgs].filter(Boolean)\n    });\n    Object.defineProperty(this, \"cause\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'TransactionExecutionError'\n    });\n    this.cause = cause;\n  }\n}\nexport class TransactionNotFoundError extends BaseError {\n  constructor(_ref11) {\n    let {\n      blockHash,\n      blockNumber,\n      blockTag,\n      hash,\n      index\n    } = _ref11;\n    let identifier = 'Transaction';\n    if (blockTag && index !== undefined) identifier = `Transaction at block time \"${blockTag}\" at index \"${index}\"`;\n    if (blockHash && index !== undefined) identifier = `Transaction at block hash \"${blockHash}\" at index \"${index}\"`;\n    if (blockNumber && index !== undefined) identifier = `Transaction at block number \"${blockNumber}\" at index \"${index}\"`;\n    if (hash) identifier = `Transaction with hash \"${hash}\"`;\n    super(`${identifier} could not be found.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'TransactionNotFoundError'\n    });\n  }\n}\nexport class TransactionReceiptNotFoundError extends BaseError {\n  constructor(_ref12) {\n    let {\n      hash\n    } = _ref12;\n    super(`Transaction receipt with hash \"${hash}\" could not be found. The Transaction may not be processed on a block yet.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'TransactionReceiptNotFoundError'\n    });\n  }\n}\nexport class WaitForTransactionReceiptTimeoutError extends BaseError {\n  constructor(_ref13) {\n    let {\n      hash\n    } = _ref13;\n    super(`Timed out while waiting for transaction with hash \"${hash}\" to be confirmed.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'WaitForTransactionReceiptTimeoutError'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["formatEther","formatGwei","BaseError","prettyPrint","args","entries","Object","map","key","value","undefined","filter","Boolean","maxLength","reduce","acc","Math","max","length","padEnd","join","FeeConflictError","constructor","InvalidLegacyVError","v","InvalidSerializableTransactionError","transaction","metaMessages","InvalidSerializedTransactionTypeError","serializedType","InvalidSerializedTransactionError","attributes","serializedTransaction","type","missing","InvalidStorageKeySizeError","storageKey","floor","TransactionExecutionError","cause","account","docsPath","chain","data","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","prettyArgs","name","id","from","address","nativeCurrency","symbol","shortMessage","TransactionNotFoundError","blockHash","blockNumber","blockTag","hash","index","identifier","TransactionReceiptNotFoundError","WaitForTransactionReceiptTimeoutError"],"sources":["D:\\Escrow App\\escrow-hardhat\\node_modules\\viem\\errors\\transaction.ts"],"sourcesContent":["import type { Account } from '../accounts/types.js'\nimport type { SendTransactionParameters } from '../actions/wallet/sendTransaction.js'\nimport type { BlockTag } from '../types/block.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hash, Hex } from '../types/misc.js'\nimport type { TransactionType } from '../types/transaction.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\n\nexport function prettyPrint(\n  args: Record<string, bigint | number | string | undefined | false | unknown>,\n) {\n  const entries = Object.entries(args)\n    .map(([key, value]) => {\n      if (value === undefined || value === false) return null\n      return [key, value]\n    })\n    .filter(Boolean) as [string, string][]\n  const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0)\n  return entries\n    .map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`)\n    .join('\\n')\n}\n\nexport type FeeConflictErrorType = FeeConflictError & {\n  name: 'FeeConflictError'\n}\nexport class FeeConflictError extends BaseError {\n  override name = 'FeeConflictError'\n  constructor() {\n    super(\n      [\n        'Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.',\n        'Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.',\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type InvalidLegacyVErrorType = InvalidLegacyVError & {\n  name: 'InvalidLegacyVError'\n}\nexport class InvalidLegacyVError extends BaseError {\n  override name = 'InvalidLegacyVError'\n\n  constructor({ v }: { v: bigint }) {\n    super(`Invalid \\`v\\` value \"${v}\". Expected 27 or 28.`)\n  }\n}\n\nexport type InvalidSerializableTransactionErrorType =\n  InvalidSerializableTransactionError & {\n    name: 'InvalidSerializableTransactionError'\n  }\nexport class InvalidSerializableTransactionError extends BaseError {\n  override name = 'InvalidSerializableTransactionError'\n\n  constructor({ transaction }: { transaction: Record<string, unknown> }) {\n    super('Cannot infer a transaction type from provided transaction.', {\n      metaMessages: [\n        'Provided Transaction:',\n        '{',\n        prettyPrint(transaction),\n        '}',\n        '',\n        'To infer the type, either provide:',\n        '- a `type` to the Transaction, or',\n        '- an EIP-1559 Transaction with `maxFeePerGas`, or',\n        '- an EIP-2930 Transaction with `gasPrice` & `accessList`, or',\n        '- a Legacy Transaction with `gasPrice`',\n      ],\n    })\n  }\n}\n\nexport type InvalidSerializedTransactionTypeErrorType =\n  InvalidSerializedTransactionTypeError & {\n    name: 'InvalidSerializedTransactionTypeError'\n  }\nexport class InvalidSerializedTransactionTypeError extends BaseError {\n  override name = 'InvalidSerializedTransactionType'\n\n  serializedType: Hex\n\n  constructor({ serializedType }: { serializedType: Hex }) {\n    super(`Serialized transaction type \"${serializedType}\" is invalid.`)\n\n    this.serializedType = serializedType\n  }\n}\n\nexport type InvalidSerializedTransactionErrorType =\n  InvalidSerializedTransactionError & {\n    name: 'InvalidSerializedTransactionError'\n  }\nexport class InvalidSerializedTransactionError extends BaseError {\n  override name = 'InvalidSerializedTransactionError'\n\n  serializedTransaction: Hex\n  type: TransactionType\n\n  constructor({\n    attributes,\n    serializedTransaction,\n    type,\n  }: {\n    attributes: Record<string, unknown>\n    serializedTransaction: Hex\n    type: TransactionType\n  }) {\n    const missing = Object.entries(attributes)\n      .map(([key, value]) => (typeof value === 'undefined' ? key : undefined))\n      .filter(Boolean)\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n      metaMessages: [\n        `Serialized Transaction: \"${serializedTransaction}\"`,\n        missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : '',\n      ].filter(Boolean),\n    })\n\n    this.serializedTransaction = serializedTransaction\n    this.type = type\n  }\n}\n\nexport type InvalidStorageKeySizeErrorType = InvalidStorageKeySizeError & {\n  name: 'InvalidStorageKeySizeError'\n}\nexport class InvalidStorageKeySizeError extends BaseError {\n  override name = 'InvalidStorageKeySizeError'\n\n  constructor({ storageKey }: { storageKey: Hex }) {\n    super(\n      `Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Math.floor(\n        (storageKey.length - 2) / 2,\n      )} bytes.`,\n    )\n  }\n}\n\nexport type TransactionExecutionErrorType = TransactionExecutionError & {\n  name: 'TransactionExecutionError'\n}\nexport class TransactionExecutionError extends BaseError {\n  override cause: BaseError\n\n  override name = 'TransactionExecutionError'\n\n  constructor(\n    cause: BaseError,\n    {\n      account,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    }: Omit<SendTransactionParameters, 'account' | 'chain'> & {\n      account: Account\n      chain?: Chain\n      docsPath?: string\n    },\n  ) {\n    const prettyArgs = prettyPrint({\n      chain: chain && `${chain?.name} (id: ${chain?.id})`,\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Request Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n    })\n    this.cause = cause\n  }\n}\n\nexport type TransactionNotFoundErrorType = TransactionNotFoundError & {\n  name: 'TransactionNotFoundError'\n}\nexport class TransactionNotFoundError extends BaseError {\n  override name = 'TransactionNotFoundError'\n  constructor({\n    blockHash,\n    blockNumber,\n    blockTag,\n    hash,\n    index,\n  }: {\n    blockHash?: Hash\n    blockNumber?: bigint\n    blockTag?: BlockTag\n    hash?: Hash\n    index?: number\n  }) {\n    let identifier = 'Transaction'\n    if (blockTag && index !== undefined)\n      identifier = `Transaction at block time \"${blockTag}\" at index \"${index}\"`\n    if (blockHash && index !== undefined)\n      identifier = `Transaction at block hash \"${blockHash}\" at index \"${index}\"`\n    if (blockNumber && index !== undefined)\n      identifier = `Transaction at block number \"${blockNumber}\" at index \"${index}\"`\n    if (hash) identifier = `Transaction with hash \"${hash}\"`\n    super(`${identifier} could not be found.`)\n  }\n}\n\nexport type TransactionReceiptNotFoundErrorType =\n  TransactionReceiptNotFoundError & {\n    name: 'TransactionReceiptNotFoundError'\n  }\nexport class TransactionReceiptNotFoundError extends BaseError {\n  override name = 'TransactionReceiptNotFoundError'\n  constructor({ hash }: { hash: Hash }) {\n    super(\n      `Transaction receipt with hash \"${hash}\" could not be found. The Transaction may not be processed on a block yet.`,\n    )\n  }\n}\n\nexport type WaitForTransactionReceiptTimeoutErrorType =\n  WaitForTransactionReceiptTimeoutError & {\n    name: 'WaitForTransactionReceiptTimeoutError'\n  }\nexport class WaitForTransactionReceiptTimeoutError extends BaseError {\n  override name = 'WaitForTransactionReceiptTimeoutError'\n  constructor({ hash }: { hash: Hash }) {\n    super(\n      `Timed out while waiting for transaction with hash \"${hash}\" to be confirmed.`,\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}