{"ast":null,"code":"const paramsRegex = /((function|event)\\s)?(.*)(\\((.*)\\))/;\nexport function extractFunctionParts(def) {\n  const parts = def.match(paramsRegex);\n  const type = parts?.[2] || undefined;\n  const name = parts?.[3];\n  const params = parts?.[5] || undefined;\n  return {\n    type,\n    name,\n    params\n  };\n}\nexport function extractFunctionName(def) {\n  return extractFunctionParts(def).name;\n}\nexport function extractFunctionParams(def) {\n  const params = extractFunctionParts(def).params;\n  const splitParams = params?.split(',').map(x => x.trim().split(' '));\n  return splitParams?.map(param => ({\n    type: param[0],\n    name: param[1] === 'indexed' ? param[2] : param[1],\n    ...(param[1] === 'indexed' ? {\n      indexed: true\n    } : {})\n  }));\n}\nexport function extractFunctionType(def) {\n  return extractFunctionParts(def).type;\n}","map":{"version":3,"mappings":"AAEA,MAAMA,WAAW,GAAG,qCAAqC;AAIzD,OAAM,SAAUC,oBAAoB,CAACC,GAAW;EAC9C,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAK,CAACJ,WAAW,CAAC;EACpC,MAAMK,IAAI,GAAGF,KAAK,GAAG,CAAC,CAAC,IAAIG,SAAS;EACpC,MAAMC,IAAI,GAAGJ,KAAK,GAAG,CAAC,CAAC;EACvB,MAAMK,MAAM,GAAGL,KAAK,GAAG,CAAC,CAAC,IAAIG,SAAS;EACtC,OAAO;IAAED,IAAI;IAAEE,IAAI;IAAEC;EAAM,CAAE;AAC/B;AAIA,OAAM,SAAUC,mBAAmB,CAACP,GAAW;EAC7C,OAAOD,oBAAoB,CAACC,GAAG,CAAC,CAACK,IAAI;AACvC;AAIA,OAAM,SAAUG,qBAAqB,CAACR,GAAW;EAC/C,MAAMM,MAAM,GAAGP,oBAAoB,CAACC,GAAG,CAAC,CAACM,MAAM;EAC/C,MAAMG,WAAW,GAAGH,MAAM,EAAEI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,EAAE,CAACH,KAAK,CAAC,GAAG,CAAC,CAAC;EACtE,OAAOD,WAAW,EAAEE,GAAG,CAAEG,KAAK,KAAM;IAClCX,IAAI,EAAEW,KAAK,CAAC,CAAC,CAAC;IACdT,IAAI,EAAES,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC;IAClD,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,GAAG;MAAEC,OAAO,EAAE;IAAI,CAAE,GAAG,EAAE;GACpD,CAAC,CAAC;AACL;AAIA,OAAM,SAAUC,mBAAmB,CAAChB,GAAW;EAC7C,OAAOD,oBAAoB,CAACC,GAAG,CAAC,CAACG,IAAI;AACvC","names":["paramsRegex","extractFunctionParts","def","parts","match","type","undefined","name","params","extractFunctionName","extractFunctionParams","splitParams","split","map","x","trim","param","indexed","extractFunctionType"],"sources":["D:\\Escrow App\\escrow-hardhat\\node_modules\\viem\\utils\\contract\\extractFunctionParts.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\n\nconst paramsRegex = /((function|event)\\s)?(.*)(\\((.*)\\))/\n\nexport type ExtractFunctionPartsErrorType = ErrorType\n\nexport function extractFunctionParts(def: string) {\n  const parts = def.match(paramsRegex)\n  const type = parts?.[2] || undefined\n  const name = parts?.[3]\n  const params = parts?.[5] || undefined\n  return { type, name, params }\n}\n\nexport type ExtractFunctionNameErrorType = ErrorType\n\nexport function extractFunctionName(def: string) {\n  return extractFunctionParts(def).name\n}\n\nexport type ExtractFunctionParamsErrorType = ErrorType\n\nexport function extractFunctionParams(def: string) {\n  const params = extractFunctionParts(def).params\n  const splitParams = params?.split(',').map((x) => x.trim().split(' '))\n  return splitParams?.map((param) => ({\n    type: param[0],\n    name: param[1] === 'indexed' ? param[2] : param[1],\n    ...(param[1] === 'indexed' ? { indexed: true } : {}),\n  }))\n}\n\nexport type ExtractFunctionTypeErrorType = ErrorType\n\nexport function extractFunctionType(def: string) {\n  return extractFunctionParts(def).type\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}