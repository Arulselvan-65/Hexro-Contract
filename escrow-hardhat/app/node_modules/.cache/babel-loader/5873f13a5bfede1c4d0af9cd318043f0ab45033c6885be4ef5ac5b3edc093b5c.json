{"ast":null,"code":"var _jsxFileName = \"D:\\\\Escrow App\\\\escrow-hardhat\\\\app\\\\src\\\\Modal.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useDialogPolyfill } from \"./useDialogPolyfill\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Modal(_ref) {\n  _s();\n  let {\n    closeOnOutsideClick,\n    onRequestClose,\n    open,\n    ...props\n  } = _ref;\n  const dialogRef = React.useRef(null);\n  const lastActiveElement = React.useRef(null);\n  const firstRender = React.useRef(true);\n  useDialogPolyfill(dialogRef);\n  React.useEffect(() => {\n    // prevents calling imperative methods on mount since the polyfill will throw an error since we are not using the `open` attribute\n    if (firstRender.current) {\n      firstRender.current = false;\n    } else {\n      const dialogNode = dialogRef.current;\n      if (open) {\n        lastActiveElement.current = document.activeElement;\n        dialogNode.showModal();\n      } else {\n        dialogNode.close();\n        //lastActiveElement.current.focus();\n      }\n    }\n  }, [open]);\n  React.useEffect(() => {\n    const dialogNode = dialogRef.current;\n    const handleCancel = event => {\n      event.preventDefault();\n      onRequestClose();\n    };\n    dialogNode.addEventListener(\"cancel\", handleCancel);\n    return () => {\n      dialogNode.removeEventListener(\"cancel\", handleCancel);\n    };\n  }, [onRequestClose]);\n  function handleOutsideClick(event) {\n    const dialogNode = dialogRef.current;\n    if (closeOnOutsideClick && event.target === dialogNode) {\n      onRequestClose();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"dialog\", {\n    ref: dialogRef,\n    style: {\n      padding: 0\n    },\n    onClick: handleOutsideClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Modal, \"USTq512UI4vVI2BZLOeYmNnK4ks=\", false, function () {\n  return [useDialogPolyfill];\n});\n_c = Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useDialogPolyfill","Modal","closeOnOutsideClick","onRequestClose","open","props","dialogRef","useRef","lastActiveElement","firstRender","useEffect","current","dialogNode","document","activeElement","showModal","close","handleCancel","event","preventDefault","addEventListener","removeEventListener","handleOutsideClick","target","padding"],"sources":["D:/Escrow App/escrow-hardhat/app/src/Modal.js"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { useDialogPolyfill } from \"./useDialogPolyfill\";\r\n\r\nexport function Modal({ closeOnOutsideClick, onRequestClose, open, ...props }) {\r\n  const dialogRef = React.useRef(null);\r\n  const lastActiveElement = React.useRef(null);\r\n  const firstRender = React.useRef(true);\r\n\r\n  useDialogPolyfill(dialogRef);\r\n\r\n  React.useEffect(() => {\r\n    // prevents calling imperative methods on mount since the polyfill will throw an error since we are not using the `open` attribute\r\n    if (firstRender.current) {\r\n      firstRender.current = false;\r\n    } else {\r\n      const dialogNode = dialogRef.current;\r\n      if (open) {\r\n        lastActiveElement.current = document.activeElement;\r\n        dialogNode.showModal();\r\n      } else {\r\n        dialogNode.close();\r\n        //lastActiveElement.current.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  React.useEffect(() => {\r\n    const dialogNode = dialogRef.current;\r\n    const handleCancel = event => {\r\n      event.preventDefault();\r\n      onRequestClose();\r\n    };\r\n    dialogNode.addEventListener(\"cancel\", handleCancel);\r\n    return () => {\r\n      dialogNode.removeEventListener(\"cancel\", handleCancel);\r\n    };\r\n  }, [onRequestClose]);\r\n\r\n  function handleOutsideClick(event) {\r\n    const dialogNode = dialogRef.current;\r\n    if (closeOnOutsideClick && event.target === dialogNode) {\r\n      onRequestClose();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <dialog ref={dialogRef} style={{ padding: 0 }} onClick={handleOutsideClick}>\r\n      <div {...props} />\r\n    </dialog>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,iBAAiB,QAAQ,qBAAqB;AAAC;AAExD,OAAO,SAASC,KAAK,OAA0D;EAAA;EAAA,IAAzD;IAAEC,mBAAmB;IAAEC,cAAc;IAAEC,IAAI;IAAE,GAAGC;EAAM,CAAC;EAC3E,MAAMC,SAAS,GAAGP,KAAK,CAACQ,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMC,iBAAiB,GAAGT,KAAK,CAACQ,MAAM,CAAC,IAAI,CAAC;EAC5C,MAAME,WAAW,GAAGV,KAAK,CAACQ,MAAM,CAAC,IAAI,CAAC;EAEtCP,iBAAiB,CAACM,SAAS,CAAC;EAE5BP,KAAK,CAACW,SAAS,CAAC,MAAM;IACpB;IACA,IAAID,WAAW,CAACE,OAAO,EAAE;MACvBF,WAAW,CAACE,OAAO,GAAG,KAAK;IAC7B,CAAC,MAAM;MACL,MAAMC,UAAU,GAAGN,SAAS,CAACK,OAAO;MACpC,IAAIP,IAAI,EAAE;QACRI,iBAAiB,CAACG,OAAO,GAAGE,QAAQ,CAACC,aAAa;QAClDF,UAAU,CAACG,SAAS,EAAE;MACxB,CAAC,MAAM;QACLH,UAAU,CAACI,KAAK,EAAE;QAClB;MACF;IACF;EACF,CAAC,EAAE,CAACZ,IAAI,CAAC,CAAC;EAEVL,KAAK,CAACW,SAAS,CAAC,MAAM;IACpB,MAAME,UAAU,GAAGN,SAAS,CAACK,OAAO;IACpC,MAAMM,YAAY,GAAGC,KAAK,IAAI;MAC5BA,KAAK,CAACC,cAAc,EAAE;MACtBhB,cAAc,EAAE;IAClB,CAAC;IACDS,UAAU,CAACQ,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IACnD,OAAO,MAAM;MACXL,UAAU,CAACS,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,CAACd,cAAc,CAAC,CAAC;EAEpB,SAASmB,kBAAkB,CAACJ,KAAK,EAAE;IACjC,MAAMN,UAAU,GAAGN,SAAS,CAACK,OAAO;IACpC,IAAIT,mBAAmB,IAAIgB,KAAK,CAACK,MAAM,KAAKX,UAAU,EAAE;MACtDT,cAAc,EAAE;IAClB;EACF;EAEA,oBACE;IAAQ,GAAG,EAAEG,SAAU;IAAC,KAAK,EAAE;MAAEkB,OAAO,EAAE;IAAE,CAAE;IAAC,OAAO,EAAEF,kBAAmB;IAAA,uBACzE;MAAA,GAASjB;IAAK;MAAA;MAAA;MAAA;IAAA;EAAI;IAAA;IAAA;IAAA;EAAA,QACX;AAEb;AAAC,GA/CeJ,KAAK;EAAA,QAKnBD,iBAAiB;AAAA;AAAA,KALHC,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}