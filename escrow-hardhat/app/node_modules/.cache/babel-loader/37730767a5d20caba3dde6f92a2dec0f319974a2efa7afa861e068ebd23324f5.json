{"ast":null,"code":"import { BaseError } from '../../errors.js';\nexport class InvalidAbiParameterError extends BaseError {\n  constructor(_ref) {\n    let {\n      param\n    } = _ref;\n    super('Failed to parse ABI parameter.', {\n      details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,\n      docsPath: '/api/human.html#parseabiparameter-1'\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidAbiParameterError'\n    });\n  }\n}\nexport class InvalidAbiParametersError extends BaseError {\n  constructor(_ref2) {\n    let {\n      params\n    } = _ref2;\n    super('Failed to parse ABI parameters.', {\n      details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,\n      docsPath: '/api/human.html#parseabiparameters-1'\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidAbiParametersError'\n    });\n  }\n}\nexport class InvalidParameterError extends BaseError {\n  constructor(_ref3) {\n    let {\n      param\n    } = _ref3;\n    super('Invalid ABI parameter.', {\n      details: param\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidParameterError'\n    });\n  }\n}\nexport class SolidityProtectedKeywordError extends BaseError {\n  constructor(_ref4) {\n    let {\n      param,\n      name\n    } = _ref4;\n    super('Invalid ABI parameter.', {\n      details: param,\n      metaMessages: [`\"${name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'SolidityProtectedKeywordError'\n    });\n  }\n}\nexport class InvalidModifierError extends BaseError {\n  constructor(_ref5) {\n    let {\n      param,\n      type,\n      modifier\n    } = _ref5;\n    super('Invalid ABI parameter.', {\n      details: param,\n      metaMessages: [`Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : ''}.`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidModifierError'\n    });\n  }\n}\nexport class InvalidFunctionModifierError extends BaseError {\n  constructor(_ref6) {\n    let {\n      param,\n      type,\n      modifier\n    } = _ref6;\n    super('Invalid ABI parameter.', {\n      details: param,\n      metaMessages: [`Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : ''}.`, `Data location can only be specified for array, struct, or mapping types, but \"${modifier}\" was given.`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidFunctionModifierError'\n    });\n  }\n}\nexport class InvalidAbiTypeParameterError extends BaseError {\n  constructor(_ref7) {\n    let {\n      abiParameter\n    } = _ref7;\n    super('Invalid ABI parameter.', {\n      details: JSON.stringify(abiParameter, null, 2),\n      metaMessages: ['ABI parameter type is invalid.']\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidAbiTypeParameterError'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAQ,iBAAiB;AAG3C,OAAM,MAAOC,wBAAyB,SAAQD,SAAS;EAGrDE,kBAAiD;IAAA,IAArC;MAAEC;IAAK,CAA8B;IAC/C,KAAK,CAAC,gCAAgC,EAAE;MACtCC,OAAO,EAAE,qBAAqBC,IAAI,CAACC,SAAS,CAACH,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG;MAC/DI,QAAQ,EAAE;KACX,CAAC;IANKC;;;;aAAO;;EAOhB;;AAGF,OAAM,MAAOC,yBAA0B,SAAQT,SAAS;EAGtDE,mBAAmD;IAAA,IAAvC;MAAEQ;IAAM,CAA+B;IACjD,KAAK,CAAC,iCAAiC,EAAE;MACvCN,OAAO,EAAE,sBAAsBC,IAAI,CAACC,SAAS,CAACI,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG;MACjEH,QAAQ,EAAE;KACX,CAAC;IANKC;;;;aAAO;;EAOhB;;AAGF,OAAM,MAAOG,qBAAsB,SAAQX,SAAS;EAGlDE,mBAAwC;IAAA,IAA5B;MAAEC;IAAK,CAAqB;IACtC,KAAK,CAAC,wBAAwB,EAAE;MAC9BC,OAAO,EAAED;KACV,CAAC;IALKK;;;;aAAO;;EAMhB;;AAGF,OAAM,MAAOI,6BAA8B,SAAQZ,SAAS;EAG1DE,mBAA4D;IAAA,IAAhD;MAAEC,KAAK;MAAEU;IAAI,CAAmC;IAC1D,KAAK,CAAC,wBAAwB,EAAE;MAC9BT,OAAO,EAAED,KAAK;MACdW,YAAY,EAAE,CACZ,IAAID,IAAI,uGAAuG;KAElH,CAAC;IARKL;;;;aAAO;;EAShB;;AAGF,OAAM,MAAOO,oBAAqB,SAAQf,SAAS;EAGjDE,mBAQC;IAAA,IARW;MACVC,KAAK;MACLa,IAAI;MACJC;IAAQ,CAKT;IACC,KAAK,CAAC,wBAAwB,EAAE;MAC9Bb,OAAO,EAAED,KAAK;MACdW,YAAY,EAAE,CACZ,aAAaG,QAAQ,gBACnBD,IAAI,GAAG,QAAQA,IAAI,QAAQ,GAAG,EAChC,GAAG;KAEN,CAAC;IAlBKR;;;;aAAO;;EAmBhB;;AAGF,OAAM,MAAOU,4BAA6B,SAAQlB,SAAS;EAGzDE,mBAQC;IAAA,IARW;MACVC,KAAK;MACLa,IAAI;MACJC;IAAQ,CAKT;IACC,KAAK,CAAC,wBAAwB,EAAE;MAC9Bb,OAAO,EAAED,KAAK;MACdW,YAAY,EAAE,CACZ,aAAaG,QAAQ,gBACnBD,IAAI,GAAG,QAAQA,IAAI,QAAQ,GAAG,EAChC,GAAG,EACH,iFAAiFC,QAAQ,cAAc;KAE1G,CAAC;IAnBKT;;;;aAAO;;EAoBhB;;AAGF,OAAM,MAAOW,4BAA6B,SAAQnB,SAAS;EAGzDE,mBAIC;IAAA,IAJW;MACVkB;IAAY,CAGb;IACC,KAAK,CAAC,wBAAwB,EAAE;MAC9BhB,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACc,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;MAC9CN,YAAY,EAAE,CAAC,gCAAgC;KAChD,CAAC;IAVKN;;;;aAAO;;EAWhB","names":["BaseError","InvalidAbiParameterError","constructor","param","details","JSON","stringify","docsPath","Object","InvalidAbiParametersError","params","InvalidParameterError","SolidityProtectedKeywordError","name","metaMessages","InvalidModifierError","type","modifier","InvalidFunctionModifierError","InvalidAbiTypeParameterError","abiParameter"],"sources":["D:\\Escrow App\\escrow-hardhat\\node_modules\\abitype\\src\\human-readable\\errors\\abiParameter.ts"],"sourcesContent":["import type { AbiItemType, AbiParameter } from '../../abi.js'\nimport { BaseError } from '../../errors.js'\nimport type { Modifier } from '../types/signatures.js'\n\nexport class InvalidAbiParameterError extends BaseError {\n  override name = 'InvalidAbiParameterError'\n\n  constructor({ param }: { param: string | object }) {\n    super('Failed to parse ABI parameter.', {\n      details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,\n      docsPath: '/api/human.html#parseabiparameter-1',\n    })\n  }\n}\n\nexport class InvalidAbiParametersError extends BaseError {\n  override name = 'InvalidAbiParametersError'\n\n  constructor({ params }: { params: string | object }) {\n    super('Failed to parse ABI parameters.', {\n      details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,\n      docsPath: '/api/human.html#parseabiparameters-1',\n    })\n  }\n}\n\nexport class InvalidParameterError extends BaseError {\n  override name = 'InvalidParameterError'\n\n  constructor({ param }: { param: string }) {\n    super('Invalid ABI parameter.', {\n      details: param,\n    })\n  }\n}\n\nexport class SolidityProtectedKeywordError extends BaseError {\n  override name = 'SolidityProtectedKeywordError'\n\n  constructor({ param, name }: { param: string; name: string }) {\n    super('Invalid ABI parameter.', {\n      details: param,\n      metaMessages: [\n        `\"${name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`,\n      ],\n    })\n  }\n}\n\nexport class InvalidModifierError extends BaseError {\n  override name = 'InvalidModifierError'\n\n  constructor({\n    param,\n    type,\n    modifier,\n  }: {\n    param: string\n    type?: AbiItemType | 'struct' | undefined\n    modifier: Modifier\n  }) {\n    super('Invalid ABI parameter.', {\n      details: param,\n      metaMessages: [\n        `Modifier \"${modifier}\" not allowed${\n          type ? ` in \"${type}\" type` : ''\n        }.`,\n      ],\n    })\n  }\n}\n\nexport class InvalidFunctionModifierError extends BaseError {\n  override name = 'InvalidFunctionModifierError'\n\n  constructor({\n    param,\n    type,\n    modifier,\n  }: {\n    param: string\n    type?: AbiItemType | 'struct' | undefined\n    modifier: Modifier\n  }) {\n    super('Invalid ABI parameter.', {\n      details: param,\n      metaMessages: [\n        `Modifier \"${modifier}\" not allowed${\n          type ? ` in \"${type}\" type` : ''\n        }.`,\n        `Data location can only be specified for array, struct, or mapping types, but \"${modifier}\" was given.`,\n      ],\n    })\n  }\n}\n\nexport class InvalidAbiTypeParameterError extends BaseError {\n  override name = 'InvalidAbiTypeParameterError'\n\n  constructor({\n    abiParameter,\n  }: {\n    abiParameter: AbiParameter & { indexed?: boolean | undefined }\n  }) {\n    super('Invalid ABI parameter.', {\n      details: JSON.stringify(abiParameter, null, 2),\n      metaMessages: ['ABI parameter type is invalid.'],\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}