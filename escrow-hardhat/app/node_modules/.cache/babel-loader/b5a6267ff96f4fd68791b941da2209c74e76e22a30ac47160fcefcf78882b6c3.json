{"ast":null,"code":"import { stringify } from '../utils/stringify.js';\nimport { BaseError } from './base.js';\nimport { getUrl } from './utils.js';\nexport class OffchainLookupError extends BaseError {\n  constructor(_ref) {\n    let {\n      callbackSelector,\n      cause,\n      data,\n      extraData,\n      sender,\n      urls\n    } = _ref;\n    super(cause.shortMessage || 'An error occurred while fetching for an offchain result.', {\n      cause,\n      metaMessages: [...(cause.metaMessages || []), cause.metaMessages?.length ? '' : [], 'Offchain Gateway Call:', urls && ['  Gateway URL(s):', ...urls.map(url => `    ${getUrl(url)}`)], `  Sender: ${sender}`, `  Data: ${data}`, `  Callback selector: ${callbackSelector}`, `  Extra data: ${extraData}`].flat()\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'OffchainLookupError'\n    });\n  }\n}\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  constructor(_ref2) {\n    let {\n      result,\n      url\n    } = _ref2;\n    super('Offchain gateway response is malformed. Response data must be a hex value.', {\n      metaMessages: [`Gateway URL: ${getUrl(url)}`, `Response: ${stringify(result)}`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'OffchainLookupResponseMalformedError'\n    });\n  }\n}\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  constructor(_ref3) {\n    let {\n      sender,\n      to\n    } = _ref3;\n    super('Reverted sender address does not match target contract address (`to`).', {\n      metaMessages: [`Contract address: ${to}`, `OffchainLookup sender address: ${sender}`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'OffchainLookupSenderMismatchError'\n    });\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,SAAS,QAAQ,WAAW;AACrC,SAASC,MAAM,QAAQ,YAAY;AAKnC,OAAM,MAAOC,mBAAoB,SAAQF,SAAS;EAEhDG,kBAcC;IAAA,IAdW;MACVC,gBAAgB;MAChBC,KAAK;MACLC,IAAI;MACJC,SAAS;MACTC,MAAM;MACNC;IAAI,CAQL;IACC,KAAK,CACHJ,KAAK,CAACK,YAAY,IAChB,0DAA0D,EAC5D;MACEL,KAAK;MACLM,YAAY,EAAE,CACZ,IAAIN,KAAK,CAACM,YAAY,IAAI,EAAE,CAAC,EAC7BN,KAAK,CAACM,YAAY,EAAEC,MAAM,GAAG,EAAE,GAAG,EAAE,EACpC,wBAAwB,EACxBH,IAAI,IAAI,CACN,mBAAmB,EACnB,GAAGA,IAAI,CAACI,GAAG,CAAEC,GAAG,IAAK,OAAOb,MAAM,CAACa,GAAG,CAAC,EAAE,CAAC,CAC3C,EACD,aAAaN,MAAM,EAAE,EACrB,WAAWF,IAAI,EAAE,EACjB,wBAAwBF,gBAAgB,EAAE,EAC1C,iBAAiBG,SAAS,EAAE,CAC7B,CAACQ,IAAI;KACP,CACF;IAnCMC;;;;aAAO;;EAoChB;;AAOF,OAAM,MAAOC,oCAAqC,SAAQjB,SAAS;EAEjEG,mBAAyD;IAAA,IAA7C;MAAEe,MAAM;MAAEJ;IAAG,CAAgC;IACvD,KAAK,CACH,4EAA4E,EAC5E;MACEH,YAAY,EAAE,CACZ,gBAAgBV,MAAM,CAACa,GAAG,CAAC,EAAE,EAC7B,aAAaf,SAAS,CAACmB,MAAM,CAAC,EAAE;KAEnC,CACF;IAVMF;;;;aAAO;;EAWhB;;AAOF,OAAM,MAAOG,iCAAkC,SAAQnB,SAAS;EAE9DG,mBAA4D;IAAA,IAAhD;MAAEK,MAAM;MAAEY;IAAE,CAAoC;IAC1D,KAAK,CACH,wEAAwE,EACxE;MACET,YAAY,EAAE,CACZ,qBAAqBS,EAAE,EAAE,EACzB,kCAAkCZ,MAAM,EAAE;KAE7C,CACF;IAVMQ;;;;aAAO;;EAWhB","names":["stringify","BaseError","getUrl","OffchainLookupError","constructor","callbackSelector","cause","data","extraData","sender","urls","shortMessage","metaMessages","length","map","url","flat","Object","OffchainLookupResponseMalformedError","result","OffchainLookupSenderMismatchError","to"],"sources":["D:\\Escrow App\\escrow-hardhat\\node_modules\\viem\\errors\\ccip.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type OffchainLookupErrorType = OffchainLookupError & {\n  name: 'OffchainLookupError'\n}\nexport class OffchainLookupError extends BaseError {\n  override name = 'OffchainLookupError'\n  constructor({\n    callbackSelector,\n    cause,\n    data,\n    extraData,\n    sender,\n    urls,\n  }: {\n    callbackSelector: Hex\n    cause: BaseError\n    data: Hex\n    extraData: Hex\n    sender: Address\n    urls: readonly string[]\n  }) {\n    super(\n      cause.shortMessage ||\n        'An error occurred while fetching for an offchain result.',\n      {\n        cause,\n        metaMessages: [\n          ...(cause.metaMessages || []),\n          cause.metaMessages?.length ? '' : [],\n          'Offchain Gateway Call:',\n          urls && [\n            '  Gateway URL(s):',\n            ...urls.map((url) => `    ${getUrl(url)}`),\n          ],\n          `  Sender: ${sender}`,\n          `  Data: ${data}`,\n          `  Callback selector: ${callbackSelector}`,\n          `  Extra data: ${extraData}`,\n        ].flat(),\n      },\n    )\n  }\n}\n\nexport type OffchainLookupResponseMalformedErrorType =\n  OffchainLookupResponseMalformedError & {\n    name: 'OffchainLookupResponseMalformedError'\n  }\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  override name = 'OffchainLookupResponseMalformedError'\n  constructor({ result, url }: { result: any; url: string }) {\n    super(\n      'Offchain gateway response is malformed. Response data must be a hex value.',\n      {\n        metaMessages: [\n          `Gateway URL: ${getUrl(url)}`,\n          `Response: ${stringify(result)}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type OffchainLookupSenderMismatchErrorType =\n  OffchainLookupSenderMismatchError & {\n    name: 'OffchainLookupSenderMismatchError'\n  }\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  override name = 'OffchainLookupSenderMismatchError'\n  constructor({ sender, to }: { sender: Address; to: Address }) {\n    super(\n      'Reverted sender address does not match target contract address (`to`).',\n      {\n        metaMessages: [\n          `Contract address: ${to}`,\n          `OffchainLookup sender address: ${sender}`,\n        ],\n      },\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}