{"ast":null,"code":"import { hashTypedData } from '../../utils/signature/hashTypedData.js';\nimport { verifyHash } from './verifyHash.js';\n/**\n * Verify that typed data was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData.html}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData(client, _ref) {\n  let {\n    address,\n    signature,\n    message,\n    primaryType,\n    types,\n    domain,\n    ...callRequest\n  } = _ref;\n  const hash = hashTypedData({\n    message,\n    primaryType,\n    types,\n    domain\n  });\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest\n  });\n}","map":{"version":3,"mappings":"AAQA,SAEEA,aAAa,QACR,wCAAwC;AAC/C,SAGEC,UAAU,QACL,iBAAiB;AAoBxB;;;;;;;;;AASA,OAAO,eAAeC,eAAe,CACnCC,MAAiC,QASL;EAAA,IAR5B;IACEC,OAAO;IACPC,SAAS;IACTC,OAAO;IACPC,WAAW;IACXC,KAAK;IACLC,MAAM;IACN,GAAGC;EAAW,CACY;EAE5B,MAAMC,IAAI,GAAGX,aAAa,CAAC;IAAEM,OAAO;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAM,CAAE,CAAC;EACnE,OAAOR,UAAU,CAACE,MAAM,EAAE;IACxBC,OAAO;IACPO,IAAI;IACJN,SAAS;IACT,GAAGK;GACJ,CAAC;AACJ","names":["hashTypedData","verifyHash","verifyTypedData","client","address","signature","message","primaryType","types","domain","callRequest","hash"],"sources":["D:\\Escrow App\\escrow-hardhat\\node_modules\\viem\\actions\\public\\verifyTypedData.ts"],"sourcesContent":["import type { Address, TypedData } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type HashTypedDataErrorType,\n  hashTypedData,\n} from '../../utils/signature/hashTypedData.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = Omit<VerifyHashParameters, 'hash'> &\n  TypedDataDefinition<TTypedData, TPrimaryType> & {\n    /** The address to verify the typed data for. */\n    address: Address\n    /** The signature to verify */\n    signature: Hex | ByteArray\n  }\n\nexport type VerifyTypedDataReturnType = boolean\n\nexport type VerifyTypedDataErrorType =\n  | HashTypedDataErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that typed data was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData.html}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData<TChain extends Chain | undefined,>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    signature,\n    message,\n    primaryType,\n    types,\n    domain,\n    ...callRequest\n  }: VerifyTypedDataParameters,\n): Promise<VerifyTypedDataReturnType> {\n  const hash = hashTypedData({ message, primaryType, types, domain })\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}